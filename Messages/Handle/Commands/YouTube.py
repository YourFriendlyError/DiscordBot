
import re
import random
import discord
import requests
import urllib.request

from discord.ext import commands
from bs4 import BeautifulSoup
from random import randint

class YouTube(commands.Cog):
	def __init__(self, client):
		self.client = client
		self._def_amount = 3
		self._like = 0
		self._dislike = 0
		
	# (?:Channel ID:<\/strong>)([\s\w\-\_]*) gets the YouTube Channel ID for this link https://commentpicker.com/youtube-channel-id.php
	# TODO: allow users to add their own keywords. (e.g: mh:YouTube -r random key words will go here)

	@commands.command(pass_context = True)
	async def YouTube(self, msg, *args):
		"""Pick a random video.
		-r -R    Pick a very random video
		-ra     Same as -r but with the amount of words to choose. mh:Youtube -ra [amount. Will default to 3 if zero or not specified]
		Dev comment: If no amount is given to -ra it will use the default amount, which is 3. -r does not need an amount as it is a fixed parameter"""

		if args[0].lower() == '-r'.lower():  # -r -R
			vid = self._yt_vid_links(3, False, None)
			self._find_ratio(f"https://www.youtube.com/watch?v={vid}") # Update self._like and self._dislike
			return await msg.send(f"Liked: {self._like}\nDisliked: {self._dislike}\nhttps://www.youtube.com/watch?v={vid}")
		
		elif args[0].lower() == '-ra'.lower():
			if int(args[1]):
				vid = self._yt_vid_links(args[1], False, None)
				self._find_ratio(f"https://www.youtube.com/watch?v={vid}")  # Update self._like and self._dislike
				return await msg.send(f"Liked: {self._like}\nDisliked: {self._dislike}\nhttps://www.youtube.com/watch?v={vid}")
		elif argsp[0].lower() == '-u'.lower(): # User keywords
			lenOfArg = len(args)
			vid = self._yt_vid_links(lenOfArg, True, args)
			self._find_ratio(f"https://www.youtube.com/watch?v={vid}")  # Update self._like and self._dislike
			return await msg.send(f"Liked: {self._like}\nDisliked: {self._dislike}\nhttps://www.youtube.com/watch?v={vid}")
		else:
			return await msg.send('Usage: mh:YouTube [parameter] [OPTIONAL: number of words to pick if using -ra as parameter. The higher the amount the slower]\n'\
			                      '-r -R    picks a random video with generated words\n'\
			                      '-ra      Same as -r but you choose the amount of words to generate. mh:Youtube -ra [Amount here. Will default to 3 if zero or not specified]\n'\
			                      '-u       Add your own keywords')
	
	def word(self, rAmount: int): # Does not exactly generate a word but returns a random word from random-word-api
		words = []
		rSite = f'https://random-word-api.herokuapp.com/word?key=RVAGA5XW&number={rAmount}'
		response = requests.get(rSite)

		for rWord in response.json():
			words.append(rWord)

		return words
	
	def random_str(self, str_size):
		res = ""
		for i in range(str_size): # Start generating random strings
			x = randint(0, 25)
			c = chr(ord('a') + x)
			res += c
		return res

	def _Start_Gen(self, gen):
		for i in self.word(gen):  # Loop through the word() function
			url = 'https://www.youtube.com/results?search_query=' + i + '+'  # and add every word generated by randomword.com to the search link. Don't ask but it works
		return url

	def _yt_vid_links(self, gen, user: bool, *args):
		if isinstance(gen, int) == False or gen == None:
			gen = self._def_amount # Defaults it to the "_def_amount" if no specified amount is given or no
		
		linked = []
		# url = f'https://www.youtube.com/results?search_query={self.random_str(3)}' # search for these random strings that were generated
		if user != True:
			url = self._Start_Gen(gen)
		else:
			if len(args) >= 1 and args[0] != None:
				for userWords in args:
					url = 'https://www.youtube.com/results?search_query=' + i + '+'
			else:
				url = self._Start_Gen(gen)

		s = str(requests.request(method = 'GET', url = url).content)
		
		# first and last is used to ignore duplicates
		first = None
		last = None

		for links in re.findall('(?:href\=\"\/watch\?v\=|\.be\/)([\w\-\_]*)', s): # REGEX to find href=/watch?v= but retrieve the video id only
			first = links
			if last != first:
				linked.append(links) # insert the scraped video id's
			last = first
		
		return random.choice(linked) # pick a random id to watch
	
	# Retrive like dislike ratio from video
	def _find_ratio(self, yt_link):
		req = urllib.request.Request(url = yt_link, headers = {'User-Agent': 'Mozilla/5.0'})
		webpage = urllib.request.urlopen(req).read()
		soup = BeautifulSoup(webpage, 'html.parser')
		html = soup.prettify('utf-8')
		
		# Retrive the amount of likes and dislikes
		for button in soup.findAll('button', attrs = {'title': 'I like this'}):
			self._like = button.text.strip()
		
		for button in soup.findAll('button', attrs = {'title': 'I dislike this'}):
			self._dislike = button.text.strip()
	
	
	# TODO: Retrive YouTube channel id and three current uploaded videos

def setup(client):
	client.add_cog(YouTube(client))